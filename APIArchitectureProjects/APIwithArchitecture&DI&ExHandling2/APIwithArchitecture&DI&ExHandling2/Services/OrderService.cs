using APIwithArchitecture.Data_Access_Layer;
using APIwithArchitecture.DTOs;
using APIwithArchitecture.Models;
using APIwithArchitecture_DI.Data_Access_Layer;
using APIwithArchitecture_DI.Services;

namespace APIwithArchitecture.Services
{
    public class OrderService : IOrderService
    {
        private readonly IOrderRespository orderRespository;
        public OrderService(IOrderRespository _orderRespository)
        { 
            orderRespository = _orderRespository;
        }

        public async Task AddOrder_Service(AddOrderDTO addOrderDTO)
        {
            Order newOrder = new Order
            {
                Customer_name = addOrderDTO.Customer_name,
                Amount = addOrderDTO.Amount,
                DeliveryLocation = addOrderDTO.DeliveryLocation,
                OrderStatus = "Initiated",
                Order_date = DateTime.Now,
                EstimatedDeliveryDate = DateTime.Now.AddDays(5)
            };

            try
            {
                // throw new Exception("Order Service Unavailable");
                await orderRespository.AddOrder_Repo(newOrder);
            }

            catch (Exception ex)
            {
                // Handle the exception.
                // Return an appropriate response to the Controller layer.
                await Console.Out.WriteLineAsync(
                    "Exception generated by repository is : " + ex.Message );
                throw ex;
            }

            // This code will start the AddOrder_Repo method asynchronously
            // and then return to the caller.
            // The caller will not be blocked while the AddOrder_Repo method is running.
            // When the AddOrder_Repo method completes,
            // the service will resume execution and return the new order to the caller.
        }
    }
}
